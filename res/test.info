-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from res/test.y
-----------------------------------------------------------------------------

state 17 contains 4 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseCalc -> Exp                            (0)
	Exp -> let var '=' Exp in Exp                      (1)
	Exp -> '-' Exp                                     (2)
	Exp -> Exp Binop Exp                               (3)
	Exp -> '(' Exp ')'                                 (4)
	Exp -> int                                         (5)
	Exp -> var                                         (6)
	Binop -> '+'                                       (7)
	Binop -> '-'                                       (8)
	Binop -> '*'                                       (9)
	Binop -> '/'                                       (10)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	let            { TokenLet }
	in             { TokenIn }
	int            { TokenInt $$ }
	var            { TokenSym $$ }
	'='            { TokenEq }
	'+'            { TokenPlus }
	'-'            { TokenMinus }
	'*'            { TokenTimes }
	'/'            { TokenDiv }
	'('            { TokenLParen }
	')'            { TokenRParen }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseCalc rule  0
	Exp             rules 1, 2, 3, 4, 5, 6
	Binop           rules 7, 8, 9, 10

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parseCalc -> . Exp                           (rule 0)

	let            shift, and enter state 2
	int            shift, and enter state 4
	var            shift, and enter state 5
	'-'            shift, and enter state 6
	'('            shift, and enter state 7

	Exp            goto state 3

State 1

	Exp -> . let var '=' Exp in Exp                     (rule 1)

	let            shift, and enter state 2


State 2

	Exp -> let . var '=' Exp in Exp                     (rule 1)

	var            shift, and enter state 15


State 3

	%start_parseCalc -> Exp .                           (rule 0)
	Exp -> Exp . Binop Exp                              (rule 3)

	'+'            shift, and enter state 11
	'-'            shift, and enter state 12
	'*'            shift, and enter state 13
	'/'            shift, and enter state 14
	%eof           accept

	Binop          goto state 10

State 4

	Exp -> int .                                        (rule 5)

	in             reduce using rule 5
	'+'            reduce using rule 5
	'-'            reduce using rule 5
	'*'            reduce using rule 5
	'/'            reduce using rule 5
	')'            reduce using rule 5
	%eof           reduce using rule 5


State 5

	Exp -> var .                                        (rule 6)

	in             reduce using rule 6
	'+'            reduce using rule 6
	'-'            reduce using rule 6
	'*'            reduce using rule 6
	'/'            reduce using rule 6
	')'            reduce using rule 6
	%eof           reduce using rule 6


State 6

	Exp -> '-' . Exp                                    (rule 2)

	let            shift, and enter state 2
	int            shift, and enter state 4
	var            shift, and enter state 5
	'-'            shift, and enter state 6
	'('            shift, and enter state 7

	Exp            goto state 9

State 7

	Exp -> '(' . Exp ')'                                (rule 4)

	let            shift, and enter state 2
	int            shift, and enter state 4
	var            shift, and enter state 5
	'-'            shift, and enter state 6
	'('            shift, and enter state 7

	Exp            goto state 8

State 8

	Exp -> Exp . Binop Exp                              (rule 3)
	Exp -> '(' Exp . ')'                                (rule 4)

	'+'            shift, and enter state 11
	'-'            shift, and enter state 12
	'*'            shift, and enter state 13
	'/'            shift, and enter state 14
	')'            shift, and enter state 18

	Binop          goto state 10

State 9

	Exp -> '-' Exp .                                    (rule 2)
	Exp -> Exp . Binop Exp                              (rule 3)

	in             reduce using rule 2
	'+'            reduce using rule 2
	'-'            reduce using rule 2
	'*'            reduce using rule 2
	'/'            reduce using rule 2
	')'            reduce using rule 2
	%eof           reduce using rule 2

	Binop          goto state 10

State 10

	Exp -> Exp Binop . Exp                              (rule 3)

	let            shift, and enter state 2
	int            shift, and enter state 4
	var            shift, and enter state 5
	'-'            shift, and enter state 6
	'('            shift, and enter state 7

	Exp            goto state 17

State 11

	Binop -> '+' .                                      (rule 7)

	let            reduce using rule 7
	int            reduce using rule 7
	var            reduce using rule 7
	'-'            reduce using rule 7
	'('            reduce using rule 7


State 12

	Binop -> '-' .                                      (rule 8)

	let            reduce using rule 8
	int            reduce using rule 8
	var            reduce using rule 8
	'-'            reduce using rule 8
	'('            reduce using rule 8


State 13

	Binop -> '*' .                                      (rule 9)

	let            reduce using rule 9
	int            reduce using rule 9
	var            reduce using rule 9
	'-'            reduce using rule 9
	'('            reduce using rule 9


State 14

	Binop -> '/' .                                      (rule 10)

	let            reduce using rule 10
	int            reduce using rule 10
	var            reduce using rule 10
	'-'            reduce using rule 10
	'('            reduce using rule 10


State 15

	Exp -> let var . '=' Exp in Exp                     (rule 1)

	'='            shift, and enter state 16


State 16

	Exp -> let var '=' . Exp in Exp                     (rule 1)

	let            shift, and enter state 2
	int            shift, and enter state 4
	var            shift, and enter state 5
	'-'            shift, and enter state 6
	'('            shift, and enter state 7

	Exp            goto state 19

State 17

	Exp -> Exp . Binop Exp                              (rule 3)
	Exp -> Exp Binop Exp .                              (rule 3)

	in             reduce using rule 3
	'+'            shift, and enter state 11
			(reduce using rule 3)

	'-'            shift, and enter state 12
			(reduce using rule 3)

	'*'            shift, and enter state 13
			(reduce using rule 3)

	'/'            shift, and enter state 14
			(reduce using rule 3)

	')'            reduce using rule 3
	%eof           reduce using rule 3

	Binop          goto state 10

State 18

	Exp -> '(' Exp ')' .                                (rule 4)

	in             reduce using rule 4
	'+'            reduce using rule 4
	'-'            reduce using rule 4
	'*'            reduce using rule 4
	'/'            reduce using rule 4
	')'            reduce using rule 4
	%eof           reduce using rule 4


State 19

	Exp -> let var '=' Exp . in Exp                     (rule 1)
	Exp -> Exp . Binop Exp                              (rule 3)

	in             shift, and enter state 20
	'+'            shift, and enter state 11
	'-'            shift, and enter state 12
	'*'            shift, and enter state 13
	'/'            shift, and enter state 14

	Binop          goto state 10

State 20

	Exp -> let var '=' Exp in . Exp                     (rule 1)

	let            shift, and enter state 2
	int            shift, and enter state 4
	var            shift, and enter state 5
	'-'            shift, and enter state 6
	'('            shift, and enter state 7

	Exp            goto state 21

State 21

	Exp -> let var '=' Exp in Exp .                     (rule 1)
	Exp -> Exp . Binop Exp                              (rule 3)

	in             reduce using rule 1
	'+'            shift, and enter state 11
	'-'            shift, and enter state 12
	'*'            shift, and enter state 13
	'/'            shift, and enter state 14
	')'            reduce using rule 1
	%eof           reduce using rule 1

	Binop          goto state 10

-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 11
Number of terminals: 11
Number of non-terminals: 3
Number of states: 22
